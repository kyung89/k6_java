package com.ruby.java.ch05;

import java.util.Random;

/*
 * 클래스 메소드 구현 실습 목적
 */
class Matrix {
	int rows;
	int cols;
	int[]data;
	
	public Matrix(int rows, int cols) {
		this.rows = rows; 
		this.cols = cols;
		data = new int[rows * cols];
	}
	void getData() {
		// 난수로 입력
		Random rnd = new Random();
		int RND_MAX = 20;

		int idx = 0;
		for(int i = 0; i < rows; i++)
			for(int j = 0; j < cols; j++) {
				this.data[idx] = rnd.nextInt(RND_MAX);
				idx++;
			}
		
	}
	Matrix addMatrix(Matrix b) {
		Matrix m = new Matrix(this.rows, this.cols);

		for(int idx = 0; idx < this.rows * this.cols; idx++)
				m.data[idx] = this.data[idx] + b.data[idx];
		
		return m;
	}
	Matrix multiplyMatrix(Matrix b) {
		Matrix m = new Matrix(this.rows, b.cols);
		
		
		
		for(int i = 0; i < this.rows; i++)
			for(int j = 0; j < b.cols; j++)
				for(int k = 0; k <this.cols; k++)
					m.data[i * rows + j] += this.data[i * rows + k] * b.data[k * cols + j];
		
		return m;	
	}
	Matrix transposeMatrix() {
		Matrix m = new Matrix(this.cols, this.rows); // B[rows = 3][cols = 4] ->  F[cols = 4][rows = 3]
		
		int idx = 0;
 		for(int i = 0; i < this.rows; i++)
			for(int j = 0; j < this.cols; j++) {
				System.out.println();
				System.out.println((cols * (idx % rows) + (idx / rows)));
				System.out.println("i=" + i + ", j=" + j + " : " +  "m.data[" + (idx) + "] = " + "this.data[" + (cols * (idx % rows) + (idx / rows)) + "] = " + this.data[cols * (idx % rows) + (idx / rows)]);
				m.data[idx] = this.data[cols * (idx % rows) + (idx / rows)];
				idx++;
				
				// m.data: 행이 this.cols, 열이 this.rows
				// m.data[i * this.cols + j] = matrix[i][j]
				// this.data: 행이 this.rows, 열이 this.cols
				
				// i = 0 ~ rows(3), j = 0 ~ cols(4)
				// i * cols + j -> cols * (j % rows) + (j / rows)
				
				// i = 0, j = 0, m.data[0 = 0 * 4 + 0] = this.data[0 = 4 * 0 + 0], i = 0, j = 0 
				// i = 0, j = 1, m.data[1 = 0 * 4 + 1] = this.data[4 = 4 * 1 + 0], i = 0, j = 1
				// i = 0, j = 2, m.data[2 = 0 * 4 + 2] = this.data[8 = 4 * 2 + 0], i = 0, j = 2
				// i = 0, j = 3, m.data[3 = 0 * 4 + 3] = this.data[1 = 4 * 0 + 1], i = 0, j = 3
				// i = 1, j = 0, m.data[4 = 1 * 4 + 0] = this.data[5 = 4 * 1 + 1], i = 1, j = 0, 4
				// i = 1, j = 1, m.data[5 = 1 * 4 + 1] = this.data[9 = 4 * 2 + 1], i = 1, j = 1, 5
				// i = 1, j = 2, m.data[6 = 1 * 4 + 2] = this.data[2 = 4 * 0 + 2], i = 1, j = 2, 6
				// i = 1, j = 3, m.data[7 = 1 * 4 + 3] = this.data[6 = 4 * 1 + 2], i = 1, j = 3, 7
				// i = 2, j = 0, m.data[8 = 2 * 4 + 0] = this.data[10 = 4 * 2 + 2], i = 2, j = 0, 8
				// i = 2, j = 1, m.data[9 = 2 * 4 + 1] = this.data[3 = 4 * 0 + 3], i = 2, j = 1, 9
				// i = 2, j = 2, m.data[10 = 2 * 4 + 2] = this.data[7 = 4 * 1 + 3], i = 2, j = 2, 10
				// i = 2, j = 3, m.data[11 = 2 * 4 + 3] = this.data[11 = 4 * 2 + 3] , i = 2, j = 3, 11
			}
			
		
		return m;
	}
	void showMatrix(String str) {
		System.out.println(str);
		//2차원 배열 모양으로 출력하는 코드 작성
		/*for(int i = 0; i < this.rows; i++) {
			for(int j = 0; j < this.cols; j++) {
				System.out.print(this.data[i * rows + j] + "\t");
			}
			System.out.println();
		}
		System.out.println();
		*/
		// data[0] = [0][0] 0
		// data[1] = [0][1] 1
		// data[2] = [0][2] 2
		// data[3] = [1][0] 3
		// data[4] = [1][1]
		// data[5] = [1][2]
		// data[6] = [2][0]
		// data[7] = [2][1]
		// data[8] = [2][2]
		
		for(int item : this.data) System.out.println(item);
		
		System.out.println();
		
		for(int idx = 0; idx < this.rows * this.cols; idx++) {
			System.out.print(this.data[idx] + "\t");
			if(idx != 0 & idx % cols == 0) System.out.println();
		}
	}
}

public class Test_행렬클래스 {

	// ch04 Test_행렬연산: 클래스 버전
	public static void main(String[] args) {
		/*
		 * 난수 생성으로 초기화
		 * A[3][4] = B[3][4] + C[3][4]; D[3][5] = B[3][4] * E[4][5];
		 * F[4][3] = B[3][4]의 전치 행렬
		 */
	/*
		Matrix B = new Matrix(3,4);
		Matrix C = new Matrix(3,4);
		Matrix A, D, F;
		Matrix E = new Matrix(4,5);
		
		System.out.println();

		System.out.println("행렬 더하기: A[3][4] = B[3][4] + C[3][4]");
		B.getData();C.getData();E.getData();
		
		System.out.println();
		
		A = B.addMatrix(C);
		B.showMatrix("B[3][4]");C.showMatrix("C[3][4]");A.showMatrix("A[3][4]");
		
		System.out.println("행렬 곱하기: D[3][5] = B[3][4] * E[4][5]");
		
		System.out.println();
		
		D = B.multiplyMatrix(E);
		B.showMatrix("B[3][4]");E.showMatrix("E[4][5]");D.showMatrix("D[3][5]");
		
		System.out.println("행렬 전치: F[4][3] = B[3][4]의 전치 행렬");
		
		System.out.println();
		
		F = B.transposeMatrix();
		B.showMatrix("B[3][4]"); 
		
		System.out.println("");
		F.showMatrix("F[4][3]");
		*/
		
		Matrix B = new Matrix(3,4);
		B.getData();
		B.showMatrix("B:");
		
	}

}